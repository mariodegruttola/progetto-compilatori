
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.util.ArrayList;
import nodes.*;
import nodes.exprs.*;
import nodes.statements.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\007\004\000\002\007\003" +
    "\000\002\004\005\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\006\003\000\002" +
    "\006\005\000\002\006\005\000\002\006\007\000\002\010" +
    "\017\000\002\010\016\000\002\010\016\000\002\010\015" +
    "\000\002\014\003\000\002\014\003\000\002\015\003\000" +
    "\002\015\005\000\002\016\003\000\002\016\002\000\002" +
    "\011\003\000\002\011\005\000\002\012\004\000\002\013" +
    "\003\000\002\013\005\000\002\017\003\000\002\017\004" +
    "\000\002\020\004\000\002\020\004\000\002\020\004\000" +
    "\002\020\004\000\002\020\004\000\002\020\004\000\002" +
    "\021\006\000\002\025\011\000\002\026\004\000\002\026" +
    "\002\000\002\027\006\000\002\030\004\000\002\030\002" +
    "\000\002\024\011\000\002\024\007\000\002\023\005\000" +
    "\002\031\006\000\002\031\005\000\002\022\006\000\002" +
    "\032\003\000\002\032\005\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\005\000\002\033\005\000\002\033\005\000\002" +
    "\033\005\000\002\033\005\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\005\000\002\033\004\000" +
    "\002\033\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\014\010\ufffe\011\ufffe\012\ufffe\013\ufffe\014" +
    "\ufffe\001\002\000\004\002\244\001\002\000\014\010\007" +
    "\011\012\012\016\013\010\014\013\001\002\000\004\055" +
    "\233\001\002\000\010\007\ufffa\017\ufffa\055\ufffa\001\002" +
    "\000\010\007\ufff9\017\ufff9\055\ufff9\001\002\000\030\004" +
    "\uffff\010\uffff\011\uffff\012\uffff\013\uffff\014\uffff\022\uffff" +
    "\027\uffff\032\uffff\033\uffff\055\uffff\001\002\000\010\007" +
    "\ufff7\017\ufff7\055\ufff7\001\002\000\004\055\020\001\002" +
    "\000\006\002\001\014\013\001\002\000\006\002\ufffc\014" +
    "\ufffc\001\002\000\010\007\ufff8\017\ufff8\055\ufff8\001\002" +
    "\000\006\002\ufffd\014\ufffd\001\002\000\004\015\021\001" +
    "\002\000\014\010\007\011\012\012\016\013\010\016\024" +
    "\001\002\000\004\055\210\001\002\000\006\006\213\016" +
    "\214\001\002\000\014\010\007\011\012\012\016\013\010" +
    "\021\031\001\002\000\006\006\uffe8\016\uffe8\001\002\000" +
    "\004\017\034\001\002\000\006\007\uffec\017\uffec\001\002" +
    "\000\006\007\032\017\uffee\001\002\000\004\017\uffed\001" +
    "\002\000\012\010\007\011\012\012\016\013\010\001\002" +
    "\000\006\007\uffeb\017\uffeb\001\002\000\026\004\ufffe\010" +
    "\ufffe\011\ufffe\012\ufffe\013\ufffe\022\ufffe\027\ufffe\032\ufffe" +
    "\033\ufffe\055\ufffe\001\002\000\026\004\043\010\007\011" +
    "\012\012\016\013\010\022\045\027\041\032\036\033\046" +
    "\055\047\001\002\000\004\015\207\001\002\000\026\004" +
    "\uffe3\022\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\031\uffe3" +
    "\032\uffe3\033\uffe3\055\uffe3\001\002\000\004\006\206\001" +
    "\002\000\034\022\045\027\041\032\036\033\046\036\062" +
    "\051\075\052\072\053\070\054\073\055\174\056\064\057" +
    "\063\060\071\001\002\000\004\006\171\001\002\000\026" +
    "\020\uffe9\036\062\051\075\052\072\053\070\054\073\055" +
    "\074\056\064\057\063\060\071\001\002\000\004\006\165" +
    "\001\002\000\024\036\062\051\075\052\072\053\070\054" +
    "\073\055\074\056\064\057\063\060\071\001\002\000\004" +
    "\015\145\001\002\000\010\007\uffe5\015\127\034\uffe5\001" +
    "\002\000\016\004\140\022\045\027\041\032\036\033\046" +
    "\055\047\001\002\000\006\007\060\034\061\001\002\000" +
    "\004\006\057\001\002\000\004\006\056\001\002\000\004" +
    "\006\055\001\002\000\026\004\uffe1\022\uffe1\024\uffe1\025" +
    "\uffe1\026\uffe1\027\uffe1\031\uffe1\032\uffe1\033\uffe1\055\uffe1" +
    "\001\002\000\026\004\uffde\022\uffde\024\uffde\025\uffde\026" +
    "\uffde\027\uffde\031\uffde\032\uffde\033\uffde\055\uffde\001\002" +
    "\000\026\004\uffe0\022\uffe0\024\uffe0\025\uffe0\026\uffe0\027" +
    "\uffe0\031\uffe0\032\uffe0\033\uffe0\055\uffe0\001\002\000\004" +
    "\055\136\001\002\000\024\036\062\051\075\052\072\053" +
    "\070\054\073\055\074\056\064\057\063\060\071\001\002" +
    "\000\024\036\062\051\075\052\072\053\070\054\073\055" +
    "\074\056\064\057\063\060\071\001\002\000\046\006\uffc8" +
    "\007\uffc8\016\uffc8\020\uffc8\023\uffc8\030\uffc8\035\uffc8\036" +
    "\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8" +
    "\045\uffc8\046\uffc8\047\uffc8\050\uffc8\001\002\000\046\006" +
    "\uffc9\007\uffc9\016\uffc9\020\uffc9\023\uffc9\030\uffc9\035\uffc9" +
    "\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044" +
    "\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\001\002\000\042" +
    "\006\uffce\007\uffce\016\uffce\020\uffce\035\102\036\077\037" +
    "\107\040\105\041\103\042\110\043\111\044\104\045\106" +
    "\046\101\047\100\050\112\001\002\000\046\006\uffc5\007" +
    "\uffc5\016\uffc5\020\uffc5\023\uffc5\030\uffc5\035\uffc5\036\uffc5" +
    "\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045" +
    "\uffc5\046\uffc5\047\uffc5\050\uffc5\001\002\000\006\006\uffd2" +
    "\007\132\001\002\000\046\006\uffcb\007\uffcb\016\uffcb\020" +
    "\uffcb\023\uffcb\030\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb" +
    "\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047" +
    "\uffcb\050\uffcb\001\002\000\046\006\uffc7\007\uffc7\016\uffc7" +
    "\020\uffc7\023\uffc7\030\uffc7\035\uffc7\036\uffc7\037\uffc7\040" +
    "\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7" +
    "\047\uffc7\050\uffc7\001\002\000\046\006\uffcc\007\uffcc\016" +
    "\uffcc\020\uffcc\023\uffcc\030\uffcc\035\uffcc\036\uffcc\037\uffcc" +
    "\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046" +
    "\uffcc\047\uffcc\050\uffcc\001\002\000\046\006\uffca\007\uffca" +
    "\016\uffca\020\uffca\023\uffca\030\uffca\035\uffca\036\uffca\037" +
    "\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca" +
    "\046\uffca\047\uffca\050\uffca\001\002\000\050\006\uffc6\007" +
    "\uffc6\015\127\016\uffc6\020\uffc6\023\uffc6\030\uffc6\035\uffc6" +
    "\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044" +
    "\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\001\002\000\024" +
    "\036\062\051\075\052\072\053\070\054\073\055\074\056" +
    "\064\057\063\060\071\001\002\000\046\006\uffb7\007\uffb7" +
    "\016\uffb7\020\uffb7\023\uffb7\030\uffb7\035\102\036\077\037" +
    "\107\040\105\041\103\042\110\043\111\044\104\045\106" +
    "\046\101\047\100\050\112\001\002\000\024\036\062\051" +
    "\075\052\072\053\070\054\073\055\074\056\064\057\063" +
    "\060\071\001\002\000\024\036\062\051\075\052\072\053" +
    "\070\054\073\055\074\056\064\057\063\060\071\001\002" +
    "\000\024\036\062\051\075\052\072\053\070\054\073\055" +
    "\074\056\064\057\063\060\071\001\002\000\024\036\062" +
    "\051\075\052\072\053\070\054\073\055\074\056\064\057" +
    "\063\060\071\001\002\000\024\036\062\051\075\052\072" +
    "\053\070\054\073\055\074\056\064\057\063\060\071\001" +
    "\002\000\024\036\062\051\075\052\072\053\070\054\073" +
    "\055\074\056\064\057\063\060\071\001\002\000\024\036" +
    "\062\051\075\052\072\053\070\054\073\055\074\056\064" +
    "\057\063\060\071\001\002\000\024\036\062\051\075\052" +
    "\072\053\070\054\073\055\074\056\064\057\063\060\071" +
    "\001\002\000\024\036\062\051\075\052\072\053\070\054" +
    "\073\055\074\056\064\057\063\060\071\001\002\000\024" +
    "\036\062\051\075\052\072\053\070\054\073\055\074\056" +
    "\064\057\063\060\071\001\002\000\024\036\062\051\075" +
    "\052\072\053\070\054\073\055\074\056\064\057\063\060" +
    "\071\001\002\000\024\036\062\051\075\052\072\053\070" +
    "\054\073\055\074\056\064\057\063\060\071\001\002\000" +
    "\046\006\uffbf\007\uffbf\016\uffbf\020\uffbf\023\uffbf\030\uffbf" +
    "\035\102\036\077\037\107\040\105\041\103\042\uffbf\043" +
    "\111\044\104\045\106\046\101\047\100\050\uffbf\001\002" +
    "\000\046\006\uffbc\007\uffbc\016\uffbc\020\uffbc\023\uffbc\030" +
    "\uffbc\035\102\036\077\037\107\040\105\041\uffbc\042\uffbc" +
    "\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\001" +
    "\002\000\046\006\uffb9\007\uffb9\016\uffb9\020\uffb9\023\uffb9" +
    "\030\uffb9\035\102\036\077\037\107\040\105\041\103\042" +
    "\uffb9\043\111\044\104\045\106\046\101\047\100\050\112" +
    "\001\002\000\046\006\uffc2\007\uffc2\016\uffc2\020\uffc2\023" +
    "\uffc2\030\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2" +
    "\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050" +
    "\uffc2\001\002\000\046\006\uffbe\007\uffbe\016\uffbe\020\uffbe" +
    "\023\uffbe\030\uffbe\035\102\036\077\037\107\040\105\041" +
    "\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe" +
    "\050\uffbe\001\002\000\046\006\uffc1\007\uffc1\016\uffc1\020" +
    "\uffc1\023\uffc1\030\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1" +
    "\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047" +
    "\uffc1\050\uffc1\001\002\000\046\006\uffbb\007\uffbb\016\uffbb" +
    "\020\uffbb\023\uffbb\030\uffbb\035\102\036\077\037\107\040" +
    "\105\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb" +
    "\047\uffbb\050\uffbb\001\002\000\046\006\uffba\007\uffba\016" +
    "\uffba\020\uffba\023\uffba\030\uffba\035\102\036\077\037\107" +
    "\040\105\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046" +
    "\uffba\047\uffba\050\uffba\001\002\000\046\006\uffc4\007\uffc4" +
    "\016\uffc4\020\uffc4\023\uffc4\030\uffc4\035\uffc4\036\uffc4\037" +
    "\107\040\105\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4" +
    "\046\uffc4\047\uffc4\050\uffc4\001\002\000\046\006\uffbd\007" +
    "\uffbd\016\uffbd\020\uffbd\023\uffbd\030\uffbd\035\102\036\077" +
    "\037\107\040\105\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045" +
    "\uffbd\046\uffbd\047\uffbd\050\uffbd\001\002\000\046\006\uffc0" +
    "\007\uffc0\016\uffc0\020\uffc0\023\uffc0\030\uffc0\035\102\036" +
    "\077\037\107\040\105\041\103\042\uffc0\043\111\044\104" +
    "\045\106\046\101\047\uffc0\050\uffc0\001\002\000\046\006" +
    "\uffc3\007\uffc3\016\uffc3\020\uffc3\023\uffc3\030\uffc3\035\uffc3" +
    "\036\uffc3\037\107\040\105\041\uffc3\042\uffc3\043\uffc3\044" +
    "\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\001\002\000\026" +
    "\016\131\036\062\051\075\052\072\053\070\054\073\055" +
    "\074\056\064\057\063\060\071\001\002\000\006\007\132" +
    "\016\133\001\002\000\046\006\uffd0\007\uffd0\016\uffd0\020" +
    "\uffd0\023\uffd0\030\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0" +
    "\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047" +
    "\uffd0\050\uffd0\001\002\000\024\036\062\051\075\052\072" +
    "\053\070\054\073\055\074\056\064\057\063\060\071\001" +
    "\002\000\046\006\uffd1\007\uffd1\016\uffd1\020\uffd1\023\uffd1" +
    "\030\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042" +
    "\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1" +
    "\001\002\000\042\006\uffcd\007\uffcd\016\uffcd\020\uffcd\035" +
    "\102\036\077\037\107\040\105\041\103\042\110\043\111" +
    "\044\104\045\106\046\101\047\100\050\112\001\002\000" +
    "\046\006\uffb8\007\uffb8\016\uffb8\020\uffb8\023\uffb8\030\uffb8" +
    "\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043" +
    "\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\001\002" +
    "\000\012\006\uffe4\007\uffe4\016\uffe4\034\uffe4\001\002\000" +
    "\026\004\uffe2\022\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2" +
    "\031\uffe2\032\uffe2\033\uffe2\055\uffe2\001\002\000\026\020" +
    "\uffe9\036\062\051\075\052\072\053\070\054\073\055\074" +
    "\056\064\057\063\060\071\001\002\000\006\007\132\020" +
    "\uffea\001\002\000\004\020\143\001\002\000\004\006\144" +
    "\001\002\000\006\002\ufff0\014\ufff0\001\002\000\024\036" +
    "\062\051\075\052\072\053\070\054\073\055\074\056\064" +
    "\057\063\060\071\001\002\000\006\007\132\016\147\001" +
    "\002\000\004\006\uffcf\001\002\000\034\023\151\035\102" +
    "\036\077\037\107\040\105\041\103\042\110\043\111\044" +
    "\104\045\106\046\101\047\100\050\112\001\002\000\014" +
    "\022\045\027\041\032\036\033\046\055\047\001\002\000" +
    "\022\022\045\024\uffd8\025\uffd8\026\uffd8\027\041\032\036" +
    "\033\046\055\047\001\002\000\010\024\155\025\uffd5\026" +
    "\154\001\002\000\014\022\045\027\041\032\036\033\046" +
    "\055\047\001\002\000\024\036\062\051\075\052\072\053" +
    "\070\054\073\055\074\056\064\057\063\060\071\001\002" +
    "\000\004\025\160\001\002\000\010\024\uffd9\025\uffd9\026" +
    "\uffd9\001\002\000\004\006\uffda\001\002\000\034\023\162" +
    "\035\102\036\077\037\107\040\105\041\103\042\110\043" +
    "\111\044\104\045\106\046\101\047\100\050\112\001\002" +
    "\000\014\022\045\027\041\032\036\033\046\055\047\001" +
    "\002\000\022\022\045\024\uffd7\025\uffd7\026\uffd7\027\041" +
    "\032\036\033\046\055\047\001\002\000\016\022\045\025" +
    "\uffd6\027\041\032\036\033\046\055\047\001\002\000\026" +
    "\004\uffdf\022\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\031" +
    "\uffdf\032\uffdf\033\uffdf\055\uffdf\001\002\000\004\020\167" +
    "\001\002\000\004\006\170\001\002\000\006\002\uffef\014" +
    "\uffef\001\002\000\026\004\uffdc\022\uffdc\024\uffdc\025\uffdc" +
    "\026\uffdc\027\uffdc\031\uffdc\032\uffdc\033\uffdc\055\uffdc\001" +
    "\002\000\036\006\171\030\uffc5\035\uffc5\036\uffc5\037\uffc5" +
    "\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046" +
    "\uffc5\047\uffc5\050\uffc5\001\002\000\034\030\203\035\102" +
    "\036\077\037\107\040\105\041\103\042\110\043\111\044" +
    "\104\045\106\046\101\047\100\050\112\001\002\000\042" +
    "\007\uffe5\015\127\030\uffc6\034\uffe5\035\uffc6\036\uffc6\037" +
    "\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6" +
    "\046\uffc6\047\uffc6\050\uffc6\001\002\000\016\004\176\022" +
    "\045\027\041\032\036\033\046\055\047\001\002\000\024" +
    "\036\062\051\075\052\072\053\070\054\073\055\074\056" +
    "\064\057\063\060\071\001\002\000\034\030\200\035\102" +
    "\036\077\037\107\040\105\041\103\042\110\043\111\044" +
    "\104\045\106\046\101\047\100\050\112\001\002\000\014" +
    "\022\045\027\041\032\036\033\046\055\047\001\002\000" +
    "\016\022\045\027\041\031\202\032\036\033\046\055\047" +
    "\001\002\000\004\006\uffd4\001\002\000\014\022\045\027" +
    "\041\032\036\033\046\055\047\001\002\000\016\022\045" +
    "\027\041\031\205\032\036\033\046\055\047\001\002\000" +
    "\004\006\uffd3\001\002\000\026\004\uffdd\022\uffdd\024\uffdd" +
    "\025\uffdd\026\uffdd\027\uffdd\031\uffdd\032\uffdd\033\uffdd\055" +
    "\uffdd\001\002\000\004\055\210\001\002\000\010\006\uffe5" +
    "\007\uffe5\016\uffe5\001\002\000\006\007\060\016\212\001" +
    "\002\000\004\006\uffdb\001\002\000\012\010\007\011\012" +
    "\012\016\013\010\001\002\000\014\010\007\011\012\012" +
    "\016\013\010\021\031\001\002\000\004\017\216\001\002" +
    "\000\026\004\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe\022" +
    "\ufffe\027\ufffe\032\ufffe\033\ufffe\055\ufffe\001\002\000\026" +
    "\004\220\010\007\011\012\012\016\013\010\022\045\027" +
    "\041\032\036\033\046\055\047\001\002\000\026\020\uffe9" +
    "\036\062\051\075\052\072\053\070\054\073\055\074\056" +
    "\064\057\063\060\071\001\002\000\016\004\222\022\045" +
    "\027\041\032\036\033\046\055\047\001\002\000\026\020" +
    "\uffe9\036\062\051\075\052\072\053\070\054\073\055\074" +
    "\056\064\057\063\060\071\001\002\000\004\020\224\001" +
    "\002\000\004\006\225\001\002\000\006\002\ufff2\014\ufff2" +
    "\001\002\000\004\020\227\001\002\000\004\006\230\001" +
    "\002\000\006\002\ufff1\014\ufff1\001\002\000\006\006\uffe7" +
    "\016\uffe7\001\002\000\010\006\uffe6\007\060\016\uffe6\001" +
    "\002\000\010\006\ufff6\007\ufff6\034\242\001\002\000\006" +
    "\006\236\007\235\001\002\000\004\055\237\001\002\000" +
    "\030\004\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb" +
    "\022\ufffb\027\ufffb\032\ufffb\033\ufffb\055\ufffb\001\002\000" +
    "\010\006\ufff5\007\ufff5\034\240\001\002\000\024\036\062" +
    "\051\075\052\072\053\070\054\073\055\074\056\064\057" +
    "\063\060\071\001\002\000\036\006\ufff3\007\ufff3\035\102" +
    "\036\077\037\107\040\105\041\103\042\110\043\111\044" +
    "\104\045\106\046\101\047\100\050\112\001\002\000\024" +
    "\036\062\051\075\052\072\053\070\054\073\055\074\056" +
    "\064\057\063\060\071\001\002\000\036\006\ufff4\007\ufff4" +
    "\035\102\036\077\037\107\040\105\041\103\042\110\043" +
    "\111\044\104\045\106\046\101\047\100\050\112\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\012\004\010\005\005\007\013\010\014\001\001" +
    "\000\004\006\233\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\021" +
    "\011\022\012\024\001\001\000\004\013\231\001\001\000" +
    "\002\001\001\000\010\005\026\014\025\015\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\032\001\001" +
    "\000\002\001\001\000\004\003\034\001\001\000\030\004" +
    "\010\005\005\013\050\017\047\020\036\021\043\022\052" +
    "\023\037\024\051\025\053\031\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\013\050" +
    "\017\174\020\036\021\043\022\052\023\037\024\051\025" +
    "\053\031\171\033\172\001\001\000\002\001\001\000\012" +
    "\016\165\031\065\032\140\033\064\001\001\000\002\001" +
    "\001\000\006\031\065\033\147\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\013\050\020\136\021\043\022" +
    "\052\023\037\024\051\025\053\031\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\031\065\032\066\033\064\001" +
    "\001\000\006\031\065\033\134\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\031" +
    "\065\033\075\001\001\000\002\001\001\000\006\031\065" +
    "\033\125\001\001\000\006\031\065\033\124\001\001\000" +
    "\006\031\065\033\123\001\001\000\006\031\065\033\122" +
    "\001\001\000\006\031\065\033\121\001\001\000\006\031" +
    "\065\033\120\001\001\000\006\031\065\033\117\001\001" +
    "\000\006\031\065\033\116\001\001\000\006\031\065\033" +
    "\115\001\001\000\006\031\065\033\114\001\001\000\006" +
    "\031\065\033\113\001\001\000\006\031\065\033\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\031" +
    "\065\032\127\033\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\031\065\033\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\016\141\031\065\032\140\033" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\031\065\032\145\033" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\013\050\017\151\020\036\021\043\022" +
    "\052\023\037\024\051\025\053\031\041\001\001\000\024" +
    "\013\050\020\136\021\043\022\052\023\037\024\051\025" +
    "\053\026\152\031\041\001\001\000\006\027\156\030\155" +
    "\001\001\000\024\013\050\017\163\020\036\021\043\022" +
    "\052\023\037\024\051\025\053\031\041\001\001\000\006" +
    "\031\065\033\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\013\050" +
    "\017\162\020\036\021\043\022\052\023\037\024\051\025" +
    "\053\031\041\001\001\000\022\013\050\020\136\021\043" +
    "\022\052\023\037\024\051\025\053\031\041\001\001\000" +
    "\022\013\050\020\136\021\043\022\052\023\037\024\051" +
    "\025\053\031\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\013\050\020\136\021\043\022\052\023\037\024\051" +
    "\025\053\031\041\001\001\000\006\031\065\033\176\001" +
    "\001\000\002\001\001\000\024\013\050\017\200\020\036" +
    "\021\043\022\052\023\037\024\051\025\053\031\041\001" +
    "\001\000\022\013\050\020\136\021\043\022\052\023\037" +
    "\024\051\025\053\031\041\001\001\000\002\001\001\000" +
    "\024\013\050\017\203\020\036\021\043\022\052\023\037" +
    "\024\051\025\053\031\041\001\001\000\022\013\050\020" +
    "\136\021\043\022\052\023\037\024\051\025\053\031\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\210\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\021\012\230\001\001\000\010\005" +
    "\026\014\214\015\027\001\001\000\002\001\001\000\004" +
    "\003\216\001\001\000\030\004\010\005\005\013\050\017" +
    "\220\020\036\021\043\022\052\023\037\024\051\025\053" +
    "\031\041\001\001\000\012\016\225\031\065\032\140\033" +
    "\064\001\001\000\022\013\050\020\136\021\043\022\052" +
    "\023\037\024\051\025\053\031\041\001\001\000\012\016" +
    "\222\031\065\032\140\033\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\031\065" +
    "\033\240\001\001\000\002\001\001\000\006\031\065\033" +
    "\242\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= VarDeclList ProcList 
            {
              ProgramOp RESULT =null;
		int varDeclOpListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varDeclOpListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VarDeclOp> varDeclOpList = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int procOpListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int procOpListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ProcOp> procOpList = (ArrayList<ProcOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ProgramOp(varDeclOpList, procOpList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProgramOp start_val = (ProgramOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // VarDeclList ::= VarDeclList VarDecl 
            {
              ArrayList<VarDeclOp> RESULT =null;
		int varDeclOpListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varDeclOpListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VarDeclOp> varDeclOpList = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varDeclOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varDeclOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDeclOp varDeclOp = (VarDeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 varDeclOpList.add(varDeclOp); RESULT = varDeclOpList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VarDeclList ::= 
            {
              ArrayList<VarDeclOp> RESULT =null;
		 RESULT = new ArrayList<VarDeclOp>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ProcList ::= ProcList Proc 
            {
              ArrayList<ProcOp> RESULT =null;
		int procOpListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int procOpListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ProcOp> procOpList = (ArrayList<ProcOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int procOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int procOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcOp procOp = (ProcOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 procOpList.add(procOp); RESULT = procOpList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ProcList ::= Proc 
            {
              ArrayList<ProcOp> RESULT =null;
		int procOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int procOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcOp procOp = (ProcOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<ProcOp>() {{add(procOp);}}; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VarDecl ::= Type IdListInit SEMI 
            {
              VarDeclOp RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<IdInitOp> idList = (ArrayList<IdInitOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDeclOp(type, idList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Type ::= INT 
            {
              String RESULT =null;
		 RESULT = "int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= BOOL 
            {
              String RESULT =null;
		 RESULT = "bool"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= FLOAT 
            {
              String RESULT =null;
		 RESULT = "float"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= STRING 
            {
              String RESULT =null;
		 RESULT = "string"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IdListInit ::= ID 
            {
              ArrayList<IdInitOp> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<IdInitOp>() {{add(new IdInitOp(new Identifier(id), null));}}; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IdListInit ::= IdListInit COMMA ID 
            {
              ArrayList<IdInitOp> RESULT =null;
		int idInitOpListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idInitOpListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<IdInitOp> idInitOpList = (ArrayList<IdInitOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 idInitOpList.add(new IdInitOp(new Identifier(id), null)); RESULT = idInitOpList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IdListInit ::= ID ASSIGN Expr 
            {
              ArrayList<IdInitOp> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<IdInitOp>() {{add(new IdInitOp(new Identifier(id), expr));}}; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IdListInit ::= IdListInit COMMA ID ASSIGN Expr 
            {
              ArrayList<IdInitOp> RESULT =null;
		int idInitOpListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idInitOpListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<IdInitOp> idInitOpList = (ArrayList<IdInitOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 idInitOpList.add(new IdInitOp(new Identifier(id), expr)); RESULT = idInitOpList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Proc ::= PROC ID LPAR ParamDeclList RPAR ResultTypeListWithVoid COLON VarDeclList StatList RETURN ReturnExprs CORP SEMI 
            {
              ProcOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int parDeclOpListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int parDeclOpListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ArrayList<ParDeclOp> parDeclOpList = (ArrayList<ParDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int resultTypeListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int resultTypeListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ArrayList<String> resultTypeList = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int varDeclOpListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int varDeclOpListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<VarDeclOp> varDeclOpList = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int statOpListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int statOpListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		BodyOp statOpList = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int returnExprsOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int returnExprsOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expr> returnExprsOp = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ProcOp(new Identifier(id), parDeclOpList, resultTypeList, new ProcBodyOp(varDeclOpList, statOpList.getStatements(), returnExprsOp)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Proc ::= PROC ID LPAR ParamDeclList RPAR ResultTypeListWithVoid COLON VarDeclList RETURN ReturnExprs CORP SEMI 
            {
              ProcOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int parDeclOpListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int parDeclOpListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ArrayList<ParDeclOp> parDeclOpList = (ArrayList<ParDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int resultTypeListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int resultTypeListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList<String> resultTypeList = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int varDeclOpListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int varDeclOpListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<VarDeclOp> varDeclOpList = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int returnExprsOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int returnExprsOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expr> returnExprsOp = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ProcOp(new Identifier(id), parDeclOpList, resultTypeList, new ProcBodyOp(varDeclOpList, new ArrayList<Statement>(), returnExprsOp)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Proc ::= PROC ID LPAR RPAR ResultTypeListWithVoid COLON VarDeclList StatList RETURN ReturnExprs CORP SEMI 
            {
              ProcOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int resultTypeListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int resultTypeListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ArrayList<String> resultTypeList = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int varDeclOpListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int varDeclOpListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<VarDeclOp> varDeclOpList = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int statOpListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int statOpListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		BodyOp statOpList = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int returnExprsOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int returnExprsOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expr> returnExprsOp = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ProcOp(new Identifier(id), new ArrayList<ParDeclOp>(), resultTypeList, new ProcBodyOp(varDeclOpList, statOpList.getStatements(), returnExprsOp)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Proc ::= PROC ID LPAR RPAR ResultTypeListWithVoid COLON VarDeclList RETURN ReturnExprs CORP SEMI 
            {
              ProcOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int resultTypeListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int resultTypeListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList<String> resultTypeList = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int varDeclOpListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int varDeclOpListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<VarDeclOp> varDeclOpList = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int returnExprsOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int returnExprsOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expr> returnExprsOp = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ProcOp(new Identifier(id), new ArrayList<ParDeclOp>(), resultTypeList, new ProcBodyOp(varDeclOpList, new ArrayList<Statement>(), returnExprsOp)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ResultTypeListWithVoid ::= ResultTypeList 
            {
              ArrayList<String> RESULT =null;
		int resultTypeListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resultTypeListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String> resultTypeList = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = resultTypeList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ResultTypeListWithVoid",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ResultTypeListWithVoid ::= VOID 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList<String>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ResultTypeListWithVoid",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ResultTypeList ::= Type 
            {
              ArrayList<String> RESULT =null;
		int resultTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resultTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String resultType = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<String>() {{add(resultType);}}; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ResultTypeList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ResultTypeList ::= ResultTypeList COMMA Type 
            {
              ArrayList<String> RESULT =null;
		int resultTypeListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int resultTypeListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> resultTypeList = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int resultTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resultTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String resultType = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  resultTypeList.add(resultType); RESULT = resultTypeList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ResultTypeList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ReturnExprs ::= ExprList 
            {
              ArrayList<Expr> RESULT =null;
		int exprOpListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprOpListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expr> exprOpList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exprOpList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReturnExprs",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ReturnExprs ::= 
            {
              ArrayList<Expr> RESULT =null;
		 RESULT = new ArrayList<Expr>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReturnExprs",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ParamDeclList ::= ParDecl 
            {
              ArrayList<ParDeclOp> RESULT =null;
		int parDeclOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parDeclOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParDeclOp parDeclOp = (ParDeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<ParDeclOp>() {{add(parDeclOp);}}; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ParamDeclList ::= ParamDeclList SEMI ParDecl 
            {
              ArrayList<ParDeclOp> RESULT =null;
		int parDeclOpListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int parDeclOpListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ParDeclOp> parDeclOpList = (ArrayList<ParDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parDeclOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parDeclOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParDeclOp parDeclOp = (ParDeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parDeclOpList.add(parDeclOp); RESULT = parDeclOpList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ParDecl ::= Type IdList 
            {
              ParDeclOp RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Identifier> idList = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParDeclOp(type, idList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IdList ::= ID 
            {
              ArrayList<Identifier> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Identifier>() {{add(new Identifier(id));}}; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IdList ::= IdList COMMA ID 
            {
              ArrayList<Identifier> RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Identifier> idList = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 idList.add(new Identifier(id)); RESULT = idList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // StatList ::= Stat 
            {
              BodyOp RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement stat = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BodyOp(new ArrayList<Statement>() {{add(stat);}}); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // StatList ::= StatList Stat 
            {
              BodyOp RESULT =null;
		int bodyOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BodyOp bodyOp = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement stat = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 bodyOp.addToArray(stat); RESULT = bodyOp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Stat ::= IfStat SEMI 
            {
              Statement RESULT =null;
		int ifOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ifOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IfOp ifOp = (IfOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ifOp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Stat ::= WhileStat SEMI 
            {
              Statement RESULT =null;
		int whileOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int whileOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WhileOp whileOp = (WhileOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = whileOp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Stat ::= ReadlnStat SEMI 
            {
              Statement RESULT =null;
		int readOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int readOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ReadOp readOp = (ReadOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = readOp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Stat ::= WriteStat SEMI 
            {
              Statement RESULT =null;
		int writeOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int writeOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WriteOp writeOp = (WriteOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = writeOp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Stat ::= AssignStat SEMI 
            {
              Statement RESULT =null;
		int assignOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int assignOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AssignOp assignOp = (AssignOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = assignOp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Stat ::= CallProc SEMI 
            {
              Statement RESULT =null;
		int callProcOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int callProcOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CallProcOp callProcOp = (CallProcOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = callProcOp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ReadlnStat ::= READ LPAR IdList RPAR 
            {
              ReadOp RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Identifier> idList = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReadOp(idList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReadlnStat",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // IfStat ::= IF Expr THEN StatList ElifList Else FI 
            {
              IfOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bodyOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bodyOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		BodyOp bodyOp = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elifListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elifListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ElifOp> elifList = (ArrayList<ElifOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elseSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elseSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BodyOp elseS = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfOp(expr, bodyOp, elifList, elseS); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ElifList ::= ElifList Elif 
            {
              ArrayList<ElifOp> RESULT =null;
		int elifListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elifListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ElifOp> elifList = (ArrayList<ElifOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elifOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elifOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ElifOp elifOp = (ElifOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 elifList.add(elifOp); RESULT = elifList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ElifList",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ElifList ::= 
            {
              ArrayList<ElifOp> RESULT =null;
		 RESULT = new ArrayList<ElifOp>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ElifList",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Elif ::= ELIF Expr THEN StatList 
            {
              ElifOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bodyOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp bodyOp = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ElifOp(expr, bodyOp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elif",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Else ::= ELSE StatList 
            {
              BodyOp RESULT =null;
		int bodyOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp bodyOp = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = bodyOp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Else ::= 
            {
              BodyOp RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // WhileStat ::= WHILE StatList RETURN Expr DO StatList OD 
            {
              WhileOp RESULT =null;
		int bodyOp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bodyOp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		BodyOp bodyOp1 = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyOp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyOp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BodyOp bodyOp2 = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WhileOp(bodyOp1, expr, bodyOp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // WhileStat ::= WHILE Expr DO StatList OD 
            {
              WhileOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyOp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyOp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BodyOp bodyOp2 = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WhileOp(null, expr, bodyOp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // AssignStat ::= IdList ASSIGN ExprList 
            {
              AssignOp RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Identifier> idList = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignOp(idList, exprList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignStat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CallProc ::= ID LPAR ExprList RPAR 
            {
              CallProcOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CallProcOp(new Identifier(id), exprList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallProc",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CallProc ::= ID LPAR RPAR 
            {
              CallProcOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CallProcOp(new Identifier(id), new ArrayList<Expr>()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallProc",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // WriteStat ::= WRITE LPAR ExprList RPAR 
            {
              WriteOp RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WriteOp(exprList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ExprList ::= Expr 
            {
              ArrayList<Expr> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Expr>() {{add(expr);}}; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ExprList ::= ExprList COMMA Expr 
            {
              ArrayList<Expr> RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 exprList.add(expr); RESULT = exprList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expr ::= NULL 
            {
              Expr RESULT =null;
		 RESULT = new NullConst("null"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expr ::= TRUE 
            {
              Expr RESULT =null;
		 RESULT = new BooleanConst("true"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expr ::= FALSE 
            {
              Expr RESULT =null;
		 RESULT = new BooleanConst("false"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expr ::= INT_CONST 
            {
              Expr RESULT =null;
		int intConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int intConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String intConst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntConst(intConst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expr ::= FLOAT_CONST 
            {
              Expr RESULT =null;
		int floatConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int floatConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String floatConst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FloatConst(floatConst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr ::= STRING_CONST 
            {
              Expr RESULT =null;
		int stringConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stringConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String stringConst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringConst(stringConst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr ::= ID 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Identifier(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr ::= CallProc 
            {
              Expr RESULT =null;
		int callProcOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int callProcOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallProcOp callProcOp = (CallProcOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = callProcOp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr ::= Expr PLUS Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AddOp(expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr ::= Expr MINUS Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DiffOp(expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= Expr TIMES Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MulOp(expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr ::= Expr DIV Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DivOp(expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= Expr AND Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AndOp(expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= Expr OR Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OrOp(expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= Expr GT Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GTOp(expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= Expr GE Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GEOp(expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= Expr LT Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LTOp(expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= Expr LE Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LEOp(expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= Expr EQ Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EQOp(expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= Expr NE Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NEOp(expr1, expr2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= MINUS Expr 
            {
              Expr RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UminusOp(expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= NOT Expr 
            {
              Expr RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NotOp(expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
